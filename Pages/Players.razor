@page "/players"

@using FifaTournamentClient.Models
@using FifaTournamentClient.Services
@using FifaTournamentClient.Components

@inject PlayersService PlayersService

<h1>Players</h1>

<table class="table table-striped table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Logo</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var player in players)
        {
            <tr>
                <td>@player.FirstName</td>
                <td>@player.LastName</td>
                <td><TeamLogo Url="@player.TeamLogoUrl"></TeamLogo></td>
                <td>
                    <button type="button" class="btn btn-danger"
                            @onclick="@(e => DeletePlayer(player.Id))">
                        <span class="oi oi-delete" aria-hidden="true"></span> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="card w-50">
    <div class="card-body">
        <EditForm Model="@playerToAdd" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" @bind-Value="playerToAdd.FirstName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" @bind-Value="playerToAdd.LastName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="teamLogoUrl">Team Logo URL</label>
                <InputText id="teamLogoUrl" @bind-Value="playerToAdd.TeamLogoUrl" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    private List<Player> players = new List<Player> { };
    private Player playerToAdd = new Player { Score = 0 };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await LoadPlayers();
        return;
    }

    private async Task LoadPlayers()
    {
        this.players = (await PlayersService.GetPlayersAsync())
            .ToList();
        return;
    }

    private async Task HandleValidSubmit()
    {
        await PlayersService.CreatePlayer(playerToAdd);
        await LoadPlayers();
        this.playerToAdd = new Player() { Score = 0 };
        return;
    }

    private async Task DeletePlayer(string id)
    {
        await PlayersService.DeletePlayer(id);
        await LoadPlayers();
        return;
    }
}
